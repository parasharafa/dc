module carry_lookahead_adder(
    input [7:0] A, B, 
    input Cin,         
    output [7:0] Sum,  
    output Cout        
);  
    wire [7:0] G, P, C;

    assign G = A & B;  // Generate terms
    assign P = A ^ B;  // Propagate terms
    assign C[0] = Cin;

    // Carry propagation (optimized)
    assign C[1] = G[0] | (P[0] & C[0]);
    assign C[2] = G[1] | (P[1] & C[1]);
    assign C[3] = G[2] | (P[2] & C[2]);
    assign C[4] = G[3] | (P[3] & C[3]);
    assign C[5] = G[4] | (P[4] & C[4]);
    assign C[6] = G[5] | (P[5] & C[5]);
    assign C[7] = G[6] | (P[6] & C[6]);

    assign Cout = G[7] | (P[7] & C[7]);  // Final carry out

    assign Sum = P ^ C;  // Sum calculation
endmodule
`timescale 1ns/1ps

module carry_lookahead_adder_tb;
   
    reg [7:0] A, B;    
    reg Cin;           
    wire [7:0] Sum;    
    wire Cout;         

    carry_lookahead_adder uut (  // Corrected instantiation
        .A(A), .B(B), .Cin(Cin),
        .Sum(Sum), .Cout(Cout)
    );

    initial begin
        A = 8'b00000000; B = 8'b00000000; Cin = 1'b0;
        #10 A = 8'b11110001; B = 8'b11110000; Cin = 1'b0;
        #10 A = 8'b10101100; B = 8'b11000011; Cin = 1'b0;
        #10 A = 8'b11011101; B = 8'b01011010; Cin = 1'b1;
        #10 A = 8'b00001110; B = 8'b01011001; Cin = 1'b1;
        #10 A = 8'b00001111; B = 8'b11111010; Cin = 1'b0;
        #10 $finish;
    end

    initial begin
        $monitor("Time = %0t | A = %b | B = %b | Cin = %b | Sum = %b | Cout = %b",
                 $time, A, B, Cin, Sum, Cout);
    end
endmodule
