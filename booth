module booth_multi(p, a, b, clk);
input clk;
input signed [7:0] a, b;
output reg signed [15:0] p;
reg signed [15:0] ans;
integer i;
integer operate;

always @(posedge clk)
begin
    p = 16'b0;
    for (i = 0; i <= 7; i = i + 2) 
    begin
        if (i == 0)
            operate = {b[1], b[0], 1'b0}; 
        else
            operate = {b[i+1], b[i], b[i-1]}; 
        case (operate)
            3'b001, 3'b010: begin 
                ans = a;
                ans = ans << i;
                p = p + ans;
            end
            3'b011: begin 
                ans = a << 1;
                ans = ans << i;
                p = p + ans;
            end
            3'b100: begin 
                ans = -(a << 1);
                ans = ans << i;
                p = p + ans;
            end
            3'b101, 3'b110: begin 
                ans = -a;
                ans = ans << i;
                p = p + ans;
            end
        endcase
    end
end
endmodule

// Testbench for Booth Multiplier with Multiple Test Cases
module bitbooth_tb;
reg signed [7:0] a;
reg signed [7:0] b;
reg clk;
wire signed [15:0] p;

booth_multi uut(.p(p), .a(a), .b(b), .clk(clk));

initial begin
    clk = 0;
    
    // Test cases with expected outputs for verification
    #10 a = -8'sd13; b = -8'sd17; // -13 * -17 = 221
    #10 $display("Test: %d * %d = %d (Expected: 221)", a, b, p);

    #10 a = 8'sd15; b = -8'sd7;   //  15 * -7  = -105
    #10 $display("Test: %d * %d = %d (Expected: -105)", a, b, p);

    #10 a = -8'sd6; b = -8'sd9;    //  -6 * -9   = 54
    #10 $display("Test: %d * %d = %d (Expected: 54)", a, b, p);

    #10 a = 8'sd25; b = 8'sd4;    //  25 * 4   = 100
    #10 $display("Test: %d * %d = %d (Expected: 100)", a, b, p);

    #10 a = -8'sd8; b = -8'sd12;  //  -8 * -12 = 96
    #10 $display("Test: %d * %d = %d (Expected: 96)", a, b, p);
    
end

always begin
    #10 clk = ~clk; 
end

initial begin
    #100 $stop;
end
endmodule
