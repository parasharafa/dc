module compar_8bit (A, B, clk, a_eq_b, a_less_b, a_grt_b); 
    parameter N = 8;
    input clk;
    input [N-1:0] A; 
    input [N-1:0] B; 
    output reg a_eq_b; 
    output reg a_less_b; 
    output reg a_grt_b;

    always @(posedge clk) begin
        if (A == B) begin 
            a_eq_b = 1;
            a_less_b = 0;
            a_grt_b = 0; 
        end else if (A > B) begin
            a_grt_b = 1; 
            a_eq_b = 0; 
            a_less_b = 0; 
        end else begin // A < B
            a_grt_b = 0; 
            a_eq_b = 0;
            a_less_b = 1; 
        end
    end 
endmodule

//Testbench code 
module compr_tb;
    // Inputs 
    reg [7:0] A; 
    reg [7:0] B; 
    reg clk; 

    // Outputs 
    wire a_eq_b; 
    wire a_less_b; 
    wire a_grt_b; 

    // Instantiate the Unit Under Test (UUT) 
    compar_8bit uut (
        .A(A), 
        .B(B), 
        .clk(clk), 
        .a_eq_b(a_eq_b), 
        .a_less_b(a_less_b), 
        .a_grt_b(a_grt_b)
    ); 

    initial begin
        clk = 0;

        // Test cases covering A < B, A > B, and A == B
        #10 A = 8'd50;  B = 8'd100;  // A < B (50 < 100)
        #10 $display("A=%d, B=%d => a_eq_b=%b, a_less_b=%b, a_grt_b=%b (Expected: 0,1,0)", A, B, a_eq_b, a_less_b, a_grt_b);

        #10 A = 8'd200; B = 8'd150;  // A > B (200 > 150)
        #10 $display("A=%d, B=%d => a_eq_b=%b, a_less_b=%b, a_grt_b=%b (Expected: 0,0,1)", A, B, a_eq_b, a_less_b, a_grt_b);

        #10 A = 8'd127; B = 8'd127;  // A == B (127 == 127)
        #10 $display("A=%d, B=%d => a_eq_b=%b, a_less_b=%b, a_grt_b=%b (Expected: 1,0,0)", A, B, a_eq_b, a_less_b, a_grt_b);

        #10 A = 8'd90;  B = 8'd25;   // A > B (90 > 25)
        #10 $display("A=%d, B=%d => a_eq_b=%b, a_less_b=%b, a_grt_b=%b (Expected: 0,0,1)", A, B, a_eq_b, a_less_b, a_grt_b);

        #10 A = 8'd18;  B = 8'd250;  // A < B (18 < 250)
        #10 $display("A=%d, B=%d => a_eq_b=%b, a_less_b=%b, a_grt_b=%b (Expected: 0,1,0)", A, B, a_eq_b, a_less_b, a_grt_b);
    end

    always begin
        #5 clk = ~clk; // Generate clock signal
    end

    initial begin
        #100 $stop; // Stop simulation after all test cases
    end
endmodule
